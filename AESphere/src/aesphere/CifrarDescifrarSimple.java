/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CifrarDescifrarSimple.java
 *
 * Created on 23-jun-2010, 14:36:56
 */

package aesphere;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.net.URL;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.swing.JOptionPane;

/**
 *
 * @author antonio
 */
public class CifrarDescifrarSimple extends javax.swing.JFrame {

    private javax.swing.JFrame hijoActual;
    private MainUI wpadre;
    private String helpErrMsg = "Ha ocurrido un error al cargar la ayuda de la aplicaci√≥n";
    private String helpErrTitle = "Ayuda - Aviso";

    /** Creates new form CifrarDescifrarSimple */
    public CifrarDescifrarSimple(MainUI padre) {
        initComponents();
        wpadre=padre;
        setHelp();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Plaintext = new javax.swing.JTextField();
        Key = new javax.swing.JTextField();
        Ciphertext = new javax.swing.JTextField();
        CiphertextD = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        KeyD = new javax.swing.JTextField();
        PlaintextD = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        BotonInfo = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        mainMenuArchivo = new javax.swing.JMenu();
        Salir = new javax.swing.JMenuItem();
        mainMenuEditar = new javax.swing.JMenu();
        CopiarCiphertext = new javax.swing.JMenuItem();
        PegarCiphertext = new javax.swing.JMenuItem();
        mainMenuOperaciones = new javax.swing.JMenu();
        CifrarItem = new javax.swing.JMenuItem();
        DescifrarItem = new javax.swing.JMenuItem();
        mainMenuAyuda = new javax.swing.JMenu();
        Contenidos = new javax.swing.JMenuItem();
        acercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Comprobar Vectores");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Ciphertext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphertextActionPerformed(evt);
            }
        });

        CiphertextD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphertextDActionPerformed(evt);
            }
        });

        jLabel1.setText("Plaintext:");

        jLabel2.setText("Ciphertext:");

        jLabel3.setText("Key:");

        jLabel4.setText("Plaintext:");

        KeyD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyDActionPerformed(evt);
            }
        });

        PlaintextD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaintextDActionPerformed(evt);
            }
        });

        jLabel5.setText("Ciphertext:");

        jLabel6.setText("Key:");

        jButton1.setText("Cifrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Descifrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        BotonInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/info.png"))); // NOI18N
        BotonInfo.setBorder(null);
        BotonInfo.setContentAreaFilled(false);
        BotonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInfoActionPerformed(evt);
            }
        });

        mainMenuArchivo.setText("Archivo");

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        mainMenuArchivo.add(Salir);

        mainMenuBar.add(mainMenuArchivo);

        mainMenuEditar.setText("Editar");

        CopiarCiphertext.setText("Copiar Ciphertext");
        CopiarCiphertext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiarCiphertextActionPerformed(evt);
            }
        });
        mainMenuEditar.add(CopiarCiphertext);

        PegarCiphertext.setText("Pegar Ciphertext");
        PegarCiphertext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PegarCiphertextActionPerformed(evt);
            }
        });
        mainMenuEditar.add(PegarCiphertext);

        mainMenuBar.add(mainMenuEditar);

        mainMenuOperaciones.setText("Operaciones");

        CifrarItem.setText("Cifrar");
        CifrarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CifrarItemActionPerformed(evt);
            }
        });
        mainMenuOperaciones.add(CifrarItem);

        DescifrarItem.setText("Descifrar");
        DescifrarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescifrarItemActionPerformed(evt);
            }
        });
        mainMenuOperaciones.add(DescifrarItem);

        mainMenuBar.add(mainMenuOperaciones);

        mainMenuAyuda.setText("Ayuda");

        Contenidos.setText("Contenidos");
        Contenidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContenidosActionPerformed(evt);
            }
        });
        mainMenuAyuda.add(Contenidos);

        acercade.setText("Acerca de");
        mainMenuAyuda.add(acercade);

        mainMenuBar.add(mainMenuAyuda);

        setJMenuBar(mainMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(55, 55, 55)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel4))
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, PlaintextD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                    .add(KeyD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, CiphertextD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(Key)
                        .add(Ciphertext)
                        .add(Plaintext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 402, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(46, 46, 46)
                        .add(jButton1))
                    .add(layout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(jButton2)))
                .add(47, 47, 47))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(733, Short.MAX_VALUE)
                .add(BotonInfo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(48, 48, 48)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Plaintext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Key, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1)
                    .add(jLabel3))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Ciphertext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(47, 47, 47)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CiphertextD, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(KeyD, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2)
                    .add(jLabel6))
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(PlaintextD, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 41, Short.MAX_VALUE)
                .add(BotonInfo)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setHelp () {

        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension ventana = getSize();

        try {
            File fichero = null;

            if (Entorno.getProperty("language").equals("ES"))
                fichero = new File("help/help_set_ES.hs");
            else if (Entorno.getProperty("language").equals("EN"))
                fichero = new File("help/help_set_EN.hs");
            URL hsURL = fichero.toURI().toURL();
            HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();
            //hb.setLocation(new java.awt.Point((pantalla.width - ventana.width) / 2,
            //                    (pantalla.height - ventana.height) / 2));
            hb.setSize(new java.awt.Dimension(800, 628));
            hb.enableHelpOnButton(Contenidos, "explicacion_subbytes", helpset);
            hb.enableHelpOnButton(BotonInfo, "explicacion_subbytes", helpset);
            hb.enableHelpOnButton(acercade, "aplicacion", helpset);
        }

        catch (Exception e) {
             JOptionPane.showMessageDialog(this, helpErrMsg, helpErrTitle,
                     JOptionPane.ERROR_MESSAGE);
        }
    }

    public void wclosed (javax.swing.JFrame hijo){
        if (hijoActual.equals(hijo)) {
            hijoActual.dispose();
            hijoActual = null;
        }
    }



    private boolean ComprobarHexadecimal (String cadena){

    boolean resul = true;

    for (int i = 0; i < cadena.length() ; i++){

      if ( ((cadena.charAt(i) >= 'A') & (cadena.charAt(i) <= 'F')) ||
          ((cadena.charAt(i) >= 'a') & (cadena.charAt(i) <= 'f')) ||
          ((cadena.charAt(i) >= '0') & (cadena.charAt(i) <= '9')));
      else {
          resul=false;
      }
    }

    return resul;


    }


    private boolean ComprobarDatosCifrar () {


        boolean aux=true;

        if ( aux && (Plaintext.getText().isEmpty() || Key.getText().isEmpty()) ){
           JOptionPane.showMessageDialog(this, "Tiene que rellenar todos los campos.");
           aux=false;
        }



        if ( aux && !ComprobarHexadecimal(Plaintext.getText()) )
             {
                 JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en el campo Plaintext.");
                 aux=false;
             }
        if ( aux && !ComprobarHexadecimal(Key.getText()) )
             {
            JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en el campo Key.");
            aux=false;
            }

        if ( (Plaintext.getText().length()== 32 || Plaintext.getText().length()== 48 || Plaintext.getText().length()== 64 ));

        else if (aux){
            JOptionPane.showMessageDialog(this, "El tama√±o del hexadecimal a cifrar debe ser de 32, 48 o 64 d√≠gitos");
            aux=false;
            }

        if ( (Key.getText().length()== 32 || Key.getText().length()== 48 || Key.getText().length()== 64 ));
        else if (aux){
            JOptionPane.showMessageDialog(this, "El tama√±o de la clave debe ser de 32, 48 o 64 d√≠gitos");
            aux=false;
            }

        return aux;
    }


    private boolean ComprobarDatosDescifrar () {


        boolean aux=true;

        if ( aux && (CiphertextD.getText().isEmpty() || KeyD.getText().isEmpty()) ){
           JOptionPane.showMessageDialog(this, "Tiene que rellenar todos los campos.");
           aux=false;
        }



        if ( aux && !ComprobarHexadecimal(CiphertextD.getText()) )
             {
                 JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en el campo Ciphertext.");
                 aux=false;
             }
        if ( aux && !ComprobarHexadecimal(KeyD.getText()) )
             {
            JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en el campo Key.");
            aux=false;
            }

        if (  (CiphertextD.getText().length()== 32 || CiphertextD.getText().length()== 48 || CiphertextD.getText().length()== 64 ));
        else if (aux){
            JOptionPane.showMessageDialog(this, "El tama√±o del hexadecimal a cifrar debe ser de 32, 48 o 64 d√≠gitos");
            aux=false;
            }

        if (  (KeyD.getText().length()== 32 || KeyD.getText().length()== 48 || KeyD.getText().length()== 64 ));
        else if (aux){
            JOptionPane.showMessageDialog(this, "El tama√±o de la clave debe ser de 32, 48 o 64 d√≠gitos");
            aux=false;
            }

        return aux;
    }



    private void CiphertextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphertextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CiphertextActionPerformed

    private void CiphertextDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphertextDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CiphertextDActionPerformed

    private void KeyDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeyDActionPerformed

    private void PlaintextDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaintextDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlaintextDActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (ComprobarDatosCifrar()) {
               String b = new String();

              //GetBytes getInput = new GetBytes("/Users/antonio/plaintext.txt", 16);
              byte[] in = Conversor.hexStringToByte(Plaintext.getText());
              //GetBytes getKey = new GetBytes("/Users/antonio/key.txt", 32);
              byte[] key = Conversor.hexStringToByte(Key.getText());
              int a=4;

              if (Key.getText().length()==32) a=4;
              else if (Key.getText().length()==48) a=6;
                   else if (Key.getText().length()==64) a=8;


                for (int j = 0; j < 16; j++)
                    b=b + (Conversor.byteToHexPair(key[j]));

              System.out.println("keyex: ");
              System.out.println(b +" long: "+ b.length());

              AESencrypt aes = new AESencrypt(key, a,false);
              System.out.println(Print.printArray("Plaintext:     ", in));
              Print.printArray("Key:           ", key);
              byte[] out = new byte[16];
              aes.Cipher(in, out);
              Ciphertext.setText(Conversor.byteToHexString(out));
           }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

      if (ComprobarDatosDescifrar()){

      int a=4;

      if (KeyD.getText().length()==32) a=4;
              else if (KeyD.getText().length()==48) a=6;
                   else if (KeyD.getText().length()==62) a=8;

      //GetBytes getInput = new GetBytes("/Users/antonio/Downloads/output.txt", 16);
      byte[] in = Conversor.hexStringToByte(CiphertextD.getText());
      //GetBytes getKey = new GetBytes("/Users/antonio/Downloads/key.txt", 16);
      byte[] key = Conversor.hexStringToByte(KeyD.getText());
      AESdecrypt aesDec = new AESdecrypt(key, a,false);
      //Print.printArray("Ciphertext:    ", in);
      //Print.printArray("Key:           ", key);
      byte[] out = new byte[16];
      aesDec.InvCipher(in, out);
      PlaintextD.setText(Conversor.byteToHexString(out));

      }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        this.dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSING));
}//GEN-LAST:event_SalirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        wpadre.setEnabled(true);
        wpadre.requestFocus();
        wpadre.wclosed(this);
    }//GEN-LAST:event_formWindowClosing

    private void CifrarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CifrarItemActionPerformed
        if (ComprobarDatosCifrar()) {
               String b = new String();

              //GetBytes getInput = new GetBytes("/Users/antonio/plaintext.txt", 16);
              byte[] in = Conversor.hexStringToByte(Plaintext.getText());
              //GetBytes getKey = new GetBytes("/Users/antonio/key.txt", 32);
              byte[] key = Conversor.hexStringToByte(Key.getText());
              int a=4;

              if (Key.getText().length()==32) a=4;
              else if (Key.getText().length()==48) a=6;
                   else if (Key.getText().length()==64) a=8;


                for (int j = 0; j < 16; j++)
                    b=b + (Conversor.byteToHexPair(key[j]));

              System.out.println("keyex: ");
              System.out.println(b +" long: "+ b.length());

              AESencrypt aes = new AESencrypt(key, a,false);
              System.out.println(Print.printArray("Plaintext:     ", in));
              Print.printArray("Key:           ", key);
              byte[] out = new byte[16];
              aes.Cipher(in, out);
              Ciphertext.setText(Conversor.byteToHexString(out));
           }
    }//GEN-LAST:event_CifrarItemActionPerformed

    private void DescifrarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescifrarItemActionPerformed
      if (ComprobarDatosDescifrar()){

      int a=4;

      if (KeyD.getText().length()==32) a=4;
              else if (KeyD.getText().length()==48) a=6;
                   else if (KeyD.getText().length()==62) a=8;

      //GetBytes getInput = new GetBytes("/Users/antonio/Downloads/output.txt", 16);
      byte[] in = Conversor.hexStringToByte(CiphertextD.getText());
      //GetBytes getKey = new GetBytes("/Users/antonio/Downloads/key.txt", 16);
      byte[] key = Conversor.hexStringToByte(KeyD.getText());
      AESdecrypt aesDec = new AESdecrypt(key, a,false);
      //Print.printArray("Ciphertext:    ", in);
      //Print.printArray("Key:           ", key);
      byte[] out = new byte[16];
      aesDec.InvCipher(in, out);
      PlaintextD.setText(Conversor.byteToHexString(out));

      }
    }//GEN-LAST:event_DescifrarItemActionPerformed

    private void CopiarCiphertextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiarCiphertextActionPerformed
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection ss = new StringSelection(Ciphertext.getText());
        cb.setContents(ss, ss);
}//GEN-LAST:event_CopiarCiphertextActionPerformed

    private void PegarCiphertextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PegarCiphertextActionPerformed
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable t = cb.getContents(this);


        try{
            DataFlavor dataFlavorStringJava = new DataFlavor("application/x-java-serialized-object; class=java.lang.String");
            if (t.isDataFlavorSupported(dataFlavorStringJava)) {
                String texto = (String) t.getTransferData(dataFlavorStringJava);
                CiphertextD.setText(texto);}
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al intentar pegar el contenido del Portapapeles");

        }
}//GEN-LAST:event_PegarCiphertextActionPerformed

    private void ContenidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContenidosActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ContenidosActionPerformed

    private void BotonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInfoActionPerformed

}//GEN-LAST:event_BotonInfoActionPerformed

    /**
    * @param args the command line arguments
    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CifrarDescifrarSimple().setVisible(true);
//
//
//
//
//
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonInfo;
    private javax.swing.JMenuItem CifrarItem;
    private javax.swing.JTextField Ciphertext;
    private javax.swing.JTextField CiphertextD;
    private javax.swing.JMenuItem Contenidos;
    private javax.swing.JMenuItem CopiarCiphertext;
    private javax.swing.JMenuItem DescifrarItem;
    private javax.swing.JTextField Key;
    private javax.swing.JTextField KeyD;
    private javax.swing.JMenuItem PegarCiphertext;
    private javax.swing.JTextField Plaintext;
    private javax.swing.JTextField PlaintextD;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JMenuItem acercade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu mainMenuArchivo;
    private javax.swing.JMenu mainMenuAyuda;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenu mainMenuEditar;
    private javax.swing.JMenu mainMenuOperaciones;
    // End of variables declaration//GEN-END:variables

}
