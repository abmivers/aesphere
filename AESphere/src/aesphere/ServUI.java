/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package aesphere;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 *
 * @author admin
 */
public class ServUI extends javax.swing.JFrame {

    private DatagramSocket socket;
    private MainUI wpadre;
    private int numclientes;

    /** Creates new form ServUI */
    public ServUI(MainUI padre, String plaintext, String ciphertext, String numeroclientes, byte [] claveinicial, byte[] clavefinal) {
        initComponents();
        wpadre = padre;
        wpadre.newchild(this);
        numclientes = Integer.parseInt(numeroclientes);
        setSize(400, 400);

        try {
            socket = new DatagramSocket(3000);
        } catch (SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        setLocationRelativeTo(wpadre);
        setVisible(true);

        //declaramos el array con el número de claves que cada cliente deberá probar
        long [] clavesPorCliente = new long [numclientes];
        //obtenemos el número de claves a probar en total
        long numClaves = getKeysToTry(claveinicial, clavefinal);
        debugArea.append("\n" + Long.toString(numClaves) + " claves a probar\n");
        //calculamos el número de claves a probar por cada cliente
        long clavesCliente = numClaves / numclientes;
        //si la división no es exacta, no todos los clientes probarán el mismo número de claves
        numClaves -= clavesCliente * numclientes;
        //rellenamos el array de claves a probar por cada cliente
        int extra = 0;
        debugArea.append("\n");
        for (int i = 0; i < numclientes; i++, extra++) {
            if (extra < numClaves) clavesPorCliente[i] = clavesCliente + 1;
            else clavesPorCliente[i] = clavesCliente;
            debugArea.append("Cliente " + i + ": " + clavesPorCliente[i] + " claves\n");
        }

        //generamos la clave inicial para cada cliente
        long acum = 0;
        debugArea.append("\n");
        byte [] auxClave = null;
        for (int i=0; i < numclientes; i++) {
            auxClave = getClientKey(claveinicial, acum);
            debugArea.append("Clave " + i + ": " + Conversor.byteToHexString(auxClave) + "\n");
            acum += clavesPorCliente[i];
        }

        //generamos la clave final para comprobar si está bien
        auxClave = getClientKey(claveinicial, acum);
        //comprobamos si la última clave generada y la clave final son iguales
        int len = clavefinal.length;
        boolean iguales = true;
        for (int i = 0; iguales && (i < len); i++)
            if (auxClave[i] != clavefinal[i]) iguales = false;

        if (iguales)
            debugArea.append("\nGeneración de claves finalizada correctamente\n");
        else
            debugArea.append("\nHubo un error en la generación de claves\n");

        //esperarPaquetes();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        debugArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        debugArea.setColumns(20);
        debugArea.setRows(5);
        debugArea.setText("Esperando conexión...\n");
        debugArea.setEditable(false);
        jScrollPane1.setViewportView(debugArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>




    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        socket.close();        
        wpadre.setEnabled(true);
        wpadre.requestFocus();
        wpadre.wclosed(this);        
    }

    // esperar a que lleguen los paquetes, mostrar los datos y repetir el paquete al cliente
    public void esperarPaquetes() {
        while (!Thread.currentThread().isInterrupted()) {
            // recibir paquete, mostrar su contenido, devolver copia al cliente
            try {
                // establecer el paquete
                byte datos[] = new byte[100];
                InetAddress clientes [] = new InetAddress [numclientes];
                int posicion;

                DatagramPacket recibirPaquete = new DatagramPacket(datos, datos.length);

                socket.receive(recibirPaquete); // esperar el paquete               
                
                String mensajerecibido = new String( recibirPaquete.getData(),
                    0, recibirPaquete.getLength() );
                
                if (mensajerecibido.equals("ClientHello")) {
                   
                    InetAddress ipcliente=recibirPaquete.getAddress();
                    if (!esta(clientes,ipcliente)) {
                       posicion = devolverposicion (clientes);
                       clientes [posicion] = ipcliente;
                        System.out.println("posicion"+posicion+" "+clientes[posicion].toString());
                        System.out.println(clientes.length);

                    }
                mostrarMensaje ("Conexión establecida con el cliente " + recibirPaquete.getAddress());
                    
                }
                
                // mostrar la informacion del paquete recibido
                mostrarMensaje( "\nPaquete recibido:" +
                    "\nDel host: " + recibirPaquete.getAddress() +
                    "\nPuerto del host: " + recibirPaquete.getPort() +
                    "\nLongitud: " + recibirPaquete.getLength() +
                    "\nContenido:\n\t" + mensajerecibido );


                enviarPaqueteACliente( recibirPaquete ); // enviar paquete al cliente
            } catch( IOException excepcionES ) {
                mostrarMensaje( excepcionES.toString() + "\n" );
                excepcionES.printStackTrace();
            }
        }
    }
    
    // repetir el paquete al cliente
    public void enviarPaqueteACliente(DatagramPacket recibirPaquete)
            throws IOException {
        mostrarMensaje( "\n\nRepitiendo datos al cliente..." );

        // crear paquete a enviar
        DatagramPacket enviarPaquete = new DatagramPacket(
                recibirPaquete.getData(),recibirPaquete.getLength(),
                recibirPaquete.getAddress(), recibirPaquete.getPort() );

        socket.send( enviarPaquete ); // enviar el paquete
        mostrarMensaje( "Paquete enviado\n" );
    }


     private long getKeysToTry (byte [] iniClave, byte [] finClave) {
         int len = iniClave.length;
         long numKeys = 0;

         for (int i = 0; i < len; i++) {
             numKeys <<= 8;
             numKeys += (Conversor.byteToInt(finClave[i]) - Conversor.byteToInt(iniClave[i]));
         }

         return numKeys;
     }

     private byte[] getClientKey (byte [] iniClave, long offset) {
         int len = iniClave.length;
         byte [] aux = new byte [len];

         boolean acarreo = false;
         int byteSum;
         for (int i = len - 1; i>=0; i--) {
            byteSum = 0;
            if (acarreo) byteSum++;

            byteSum += Conversor.byteToInt(iniClave[i]) + Conversor.byteToInt((byte) offset);
            aux[i] = (byte) byteSum;

            if ((0xff00 & byteSum) != 0) acarreo = true;
            else acarreo = false;

            offset >>= 8;
         }

         return aux;
     }

     private int devolverposicion (InetAddress clientes []) {

         int i=0;

         while (clientes [i] != null) {
             i++;
         }

         return i;
     }

    private boolean esta (InetAddress clientes [] , InetAddress ipcliente) {

        boolean resul = false;

        for (int i = 0; i < numclientes ; i++ ){
          if (ipcliente == clientes [i]) {
              resul = true;
          }
        }

        return resul;

    }

    private void mostrarMensaje(final String mensajeAMostrar) {
        debugArea.append(mensajeAMostrar);
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea debugArea;
    // End of variables declaration

}
