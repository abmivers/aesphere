/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package aesphere;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 *
 * @author admin
 */
public class ServUI extends javax.swing.JFrame {

    private DatagramSocket socket;
    private MainUI wpadre;
    private int numclientes;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Esperando conexión...");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        socket.close();
        //ESTE IF SE QUITARÁ CUANDO SE QUITE EL MAIN DE ESTA CLASE
        if (wpadre != null) {
            wpadre.setEnabled(true);
            wpadre.requestFocus();
            wpadre.wclosed(this);
        }
    }

    //CONSTRUCTOR PARA BORRAR, PARA USO DESDE EL MAIN DE SERVUI
    public ServUI() {
        initComponents();
        setSize(400, 400);

        try {
            socket = new DatagramSocket(3000);
        } catch (SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        setLocationRelativeTo(null);
        setVisible(true);
    }

    public ServUI(MainUI padre, String plaintext, String ciphertext, String numeroclientes, byte [] claveinicial, byte[] clavefinal) {
        initComponents();
        wpadre = padre;
        wpadre.newchild(this);
        numclientes = Integer.parseInt(numeroclientes);
        setSize(400, 400);

        try {
            socket = new DatagramSocket(3000);
        } catch (SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        setLocationRelativeTo(wpadre);
        setVisible(true);

        esperarPaquetes();
    }

    // esperar a que lleguen los paquetes, mostrar los datos y repetir el paquete al cliente
    public void esperarPaquetes() {
        while (/*!Thread.currentThread().isInterrupted()*/true) {
            // recibir paquete, mostrar su contenido, devolver copia al cliente
            try {
                // establecer el paquete
                byte datos[] = new byte[100];
                InetAddress clientes [] = new InetAddress [numclientes];
                int posicion;

                DatagramPacket recibirPaquete = new DatagramPacket(datos, datos.length);

                socket.receive(recibirPaquete); // esperar el paquete               
                
                String mensajerecibido = new String( recibirPaquete.getData(),
                    0, recibirPaquete.getLength() );
                
                if (mensajerecibido.equals("ClientHello")) {
                   
                    InetAddress ipcliente=recibirPaquete.getAddress();
                    if (!esta (clientes,ipcliente)) {
                       posicion = devolverposicion (clientes);
                       clientes [posicion] = ipcliente;
                        System.out.println("posicion"+posicion+" "+clientes[posicion].toString());
                        System.out.println(clientes.length);

                    }
                mostrarMensaje ("Conexión establecida con el cliente " + recibirPaquete.getAddress());
                    
                }
                
                // mostrar la informacion del paquete recibido
                mostrarMensaje( "\nPaquete recibido:" +
                    "\nDel host: " + recibirPaquete.getAddress() +
                    "\nPuerto del host: " + recibirPaquete.getPort() +
                    "\nLongitud: " + recibirPaquete.getLength() +
                    "\nContenido:\n\t" + mensajerecibido );


                enviarPaqueteACliente( recibirPaquete ); // enviar paquete al cliente
            } catch( IOException excepcionES ) {
                mostrarMensaje( excepcionES.toString() + "\n" );
                excepcionES.printStackTrace();
            }
        }
    }

    private byte [] getNextKey (byte [] clave)
            throws java.lang.IndexOutOfBoundsException {
        int lastIndex = clave.length - 1;
        /*
         * si en la última posición del array (donde se encuentra el byte de
         * menor peso) hemos alcanzado el valor máximo (-1),
         * la ponemos a 0 (sumando 1) y aumentamos en uno el valor del byte de
         * peso inmediatamente mayor.
         */
        if (clave[lastIndex] == -1) {
            int i;
            /*
             * mientras el byte de peso inmediatamente mayor haya alcanzado
             * también su valor máximo, recorremos el array reiniciando a 0
             * todos los bytes hasta encontrar el primero en el que podamos
             * incrementar su valor
             */
            for (i = lastIndex; (i >= 0) && (clave[i] == -1); i--)
                clave[i]++;

            if (i < 0)
                throw new java.lang.IndexOutOfBoundsException("Last key possible reached");
            else
                clave[i]++;
        } else
            clave[lastIndex]++;

        return clave;
    }

    
    // repetir el paquete al cliente
    public void enviarPaqueteACliente(DatagramPacket recibirPaquete)
            throws IOException {
        mostrarMensaje( "\n\nRepitiendo datos al cliente..." );

        // crear paquete a enviar
        DatagramPacket enviarPaquete = new DatagramPacket(
                recibirPaquete.getData(),recibirPaquete.getLength(),
                recibirPaquete.getAddress(), recibirPaquete.getPort() );

        socket.send( enviarPaquete ); // enviar el paquete
        mostrarMensaje( "Paquete enviado\n" );
    }


     private void dividirespacioclaves () {

     }

     private int devolverposicion (InetAddress clientes []) {
         
         int i=0;
         
         while (clientes [i] != null) {
             i++;
         }
         
         return i;
     }  
    
    private boolean esta (InetAddress clientes [] , InetAddress ipcliente) {

        boolean resul = false;

        for (int i = 0; i < numclientes ; i++ ){
          if (ipcliente == clientes [i]) {
              resul = true;
          }
        }

        return resul;

    }

    private void mostrarMensaje(final String mensajeAMostrar) {
        jTextArea1.append(mensajeAMostrar);
    }

    public static void main(String args[]) {
        ServUI aplicacion = new ServUI();
        aplicacion.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        aplicacion.esperarPaquetes();
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration

}
