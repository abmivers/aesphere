/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package aesphere;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import javax.swing.JOptionPane;

/**
 *
 * @author admin
 */
public class ServUI extends javax.swing.JFrame {

    private DatagramSocket socket;
    private MainUI wpadre;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Esperando conexión...");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        socket.close();
        //ESTE IF SE QUITARÁ CUANDO SE QUITE EL MAIN DE ESTA CLASE
        if (wpadre != null) {
            wpadre.setEnabled(true);
            wpadre.requestFocus();
            wpadre.wclosed(this);
        }
    }

    //CONSTRUCTOR PARA BORRAR, PARA USO DESDE EL MAIN DE SERVUI
    public ServUI() {
        initComponents();
        setSize(400, 400);

        try {
            socket = new DatagramSocket(3000);
        } catch (SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        setLocationRelativeTo(null);
        setVisible(true);
    }

    public ServUI(MainUI padre) {
        initComponents();
        wpadre = padre;
        wpadre.newchild(this);
        setSize(400, 400);

        try {
            socket = new DatagramSocket(3000);
        } catch (SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        setLocationRelativeTo(wpadre);
        setVisible(true);

        esperarPaquetes();
    }

    // esperar a que lleguen los paquetes, mostrar los datos y repetir el paquete al cliente
    public void esperarPaquetes() {
        while (/*!Thread.currentThread().isInterrupted()*/true) {
            // recibir paquete, mostrar su contenido, devolver copia al cliente
            try {
                // establecer el paquete
                byte datos[] = new byte[100];
                DatagramPacket recibirPaquete = new DatagramPacket(datos, datos.length);

                socket.receive(recibirPaquete); // esperar el paquete               

                // mostrar la informacion del paquete recibido
                mostrarMensaje( "\nPaquete recibido:" +
                    "\nDel host: " + recibirPaquete.getAddress() +
                    "\nPuerto del host: " + recibirPaquete.getPort() +
                    "\nLongitud: " + recibirPaquete.getLength() +
                    "\nContenido:\n\t" + new String( recibirPaquete.getData(),
                    0, recibirPaquete.getLength() ) );

                enviarPaqueteACliente( recibirPaquete ); // enviar paquete al cliente
            } catch( IOException excepcionES ) {
                mostrarMensaje( excepcionES.toString() + "\n" );
                excepcionES.printStackTrace();
            }
        }
    }

    // repetir el paquete al cliente
    public void enviarPaqueteACliente(DatagramPacket recibirPaquete)
            throws IOException {
        mostrarMensaje( "\n\nRepitiendo datos al cliente..." );

        // crear paquete a enviar
        DatagramPacket enviarPaquete = new DatagramPacket(
                recibirPaquete.getData(),recibirPaquete.getLength(),
                recibirPaquete.getAddress(), recibirPaquete.getPort() );

        socket.send( enviarPaquete ); // enviar el paquete
        mostrarMensaje( "Paquete enviado\n" );
    }


    private void mostrarMensaje(final String mensajeAMostrar) {
        jTextArea1.append(mensajeAMostrar);
    }

    public static void main(String args[]) {
        ServUI aplicacion = new ServUI();
        aplicacion.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        aplicacion.esperarPaquetes();
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration

}
