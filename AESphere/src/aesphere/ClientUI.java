/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientUI.java
 *
 * Created on 03-jul-2010, 18:04:51
 */

package aesphere;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 *
 * @author admin
 */
public class ClientUI extends javax.swing.JFrame {

    private DatagramSocket socket;
    private String servIP;

    /** Creates new form ClientUI */
    public ClientUI(String plaintext, String ciphertext, String dirIP, byte[] claveinicial, byte[] clavefinal) {
        initComponents();
        servIP = dirIP;
        setSize(400, 400);
        setLocationRelativeTo(null);
        setVisible(true);

        // crear objeto DatagramSocket para enviar y recibir paquetes
        try {
            socket = new DatagramSocket();
        }

        // atrapar los problemas que pueden ocurrir al crear objeto DatagramSocket
        catch( SocketException excepcionSocket ) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        esperarClientHello();
        esperarClave();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaPantalla = new javax.swing.JTextArea();
        HelloButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaPantalla.setColumns(20);
        areaPantalla.setEditable(false);
        areaPantalla.setLineWrap(true);
        areaPantalla.setRows(5);
        jScrollPane1.setViewportView(areaPantalla);

        HelloButton.setText("jButton1");
        HelloButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelloButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HelloButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HelloButton, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HelloButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelloButtonActionPerformed
       String mensaje = "ClientHello";
       byte datos[] = mensaje.getBytes();

       try {
       DatagramPacket enviarPaquete = new DatagramPacket( datos,
       datos.length, InetAddress.getByName(servIP), 3000);

       socket.send( enviarPaquete );
       }

       catch (Exception e) {
           e.printStackTrace();
       }
    }//GEN-LAST:event_HelloButtonActionPerformed

   // esperar a que lleguen los paquetes del Servidor, mostrar el contenido de los paquetes
   public void esperarClientHello() {
      boolean encontrado = false;
      while (!Thread.currentThread().isInterrupted() && !encontrado) {

         // recibir el paquete y mostrar su contenido
         try {

            // establecer el paquete
            byte datos[] = new byte[ 100 ];
            DatagramPacket recibirPaquete = new DatagramPacket(
               datos, datos.length );

            socket.receive( recibirPaquete ); // esperar un paquete

            String mensajerecibido = new String( recibirPaquete.getData(),
                  0, recibirPaquete.getLength() );

            if (mensajerecibido.equals("ClientHello")) {
                encontrado = true;
                mostrarMensaje ("Conexión establecida");
                HelloButton.setEnabled(false);
            }


            else {
            // mostrar el contenido del paquete
            mostrarMensaje( "\nPaquete recibido:" +
               "\nDel host: " + recibirPaquete.getAddress() +
               "\nPuerto del host: " + recibirPaquete.getPort() +
               "\nLongitud: " + recibirPaquete.getLength() +
               "\nContenido:\n\t" + mensajerecibido );
            }


         }

         // procesar los problemas que pueden ocurrir al recibir o mostrar el paquete
         catch( IOException excepcion ) {
            mostrarMensaje( excepcion.toString() + "\n" );
            excepcion.printStackTrace();
         }

      }

   }

    public void esperarClave() {
      boolean encontrado = false;
      while (!Thread.currentThread().isInterrupted() && !encontrado) {

         // recibir el paquete y mostrar su contenido
         try {

            // establecer el paquete
            byte datos[] = new byte[ 100 ];
            DatagramPacket recibirPaquete = new DatagramPacket(
               datos, datos.length );

            socket.receive( recibirPaquete ); // esperar un paquete

            String mensajerecibido = new String( recibirPaquete.getData(),
                  0, recibirPaquete.getLength() );

            if (mensajerecibido.equals("ClientHello")) {
                encontrado = true;
                mostrarMensaje ("Conexión establecida");
                HelloButton.setEnabled(false);
            }


            else {
            // mostrar el contenido del paquete
            mostrarMensaje( "\nPaquete recibido:" +
               "\nDel host: " + recibirPaquete.getAddress() +
               "\nPuerto del host: " + recibirPaquete.getPort() +
               "\nLongitud: " + recibirPaquete.getLength() +
               "\nContenido:\n\t" + mensajerecibido );
            }


         }

         // procesar los problemas que pueden ocurrir al recibir o mostrar el paquete
         catch( IOException excepcion ) {
            mostrarMensaje( excepcion.toString() + "\n" );
            excepcion.printStackTrace();
         }

      }

   }

    private byte [] getNextKey (byte [] clave) 
            throws java.lang.IndexOutOfBoundsException {
        int lastIndex = clave.length - 1;
        /*
         * si en la última posición del array (donde se encuentra el byte de
         * menor peso) hemos alcanzado el valor máximo (-1),
         * la ponemos a 0 (sumando 1) y aumentamos en uno el valor del byte de
         * peso inmediatamente mayor.
         */        
        if (clave[lastIndex] == -1) {
            int i;
            /*
             * mientras el byte de peso inmediatamente mayor haya alcanzado
             * también su valor máximo, recorremos el array reiniciando a 0
             * todos los bytes hasta encontrar el primero en el que podamos
             * incrementar su valor
             */
            for (i = lastIndex; (i >= 0) && (clave[i] == -1); i--)
                clave[i]++;

            if (i < 0)
                throw new java.lang.IndexOutOfBoundsException("Last key possible reached");
            else
                clave[i]++;
        } else
            clave[lastIndex]++;

        return clave;
    }

    public void mostrarMensaje( final String mensajeAMostrar ) {
        areaPantalla.append( mensajeAMostrar );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HelloButton;
    private javax.swing.JTextArea areaPantalla;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
