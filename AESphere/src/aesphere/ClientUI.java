/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientUI.java
 *
 * Created on 03-jul-2010, 18:04:51
 */

package aesphere;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 *
 * @author admin
 */
public class ClientUI extends javax.swing.JFrame {

    private DatagramSocket socket;
    private MainUI wpadre;
    private InetAddress servIP;
    private byte [] claveInicial;
    private long numClaves;
    private byte [] plaintext;
    private byte [] ciphertext;

    /** Creates new form ClientUI */
    public ClientUI(MainUI padre, InetAddress dirIP) {
        initComponents();
        wpadre = padre;
        //wpadre.newchild(this);
        servIP = dirIP;
        plaintext = new byte[16];
        ciphertext = new byte[16];
        setSize(400, 400);
        setLocationRelativeTo(null);
        setVisible(true);

        // crear objeto DatagramSocket para enviar y recibir paquetes
        try {
            socket = new DatagramSocket();
        } catch(SocketException excepcionSocket) {
            excepcionSocket.printStackTrace();
            System.exit(1);
        }

        clientHello();

        esperarClave();
        debugArea.append("Clave inicial: " + Conversor.byteToHexString(claveInicial) +
                "\nNúmero de claves a probar: " + Long.toString(numClaves) + "\n");

        esperarTexto();
        debugArea.append("Texo en claro: " + Conversor.byteToHexString(plaintext) +
                "\nTexto cifrado: " + Conversor.byteToHexString(ciphertext) + "\n");

        debugArea.append("\nFin del proceso\n");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        debugArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        debugArea.setColumns(20);
        debugArea.setEditable(false);
        debugArea.setLineWrap(true);
        debugArea.setRows(5);
        jScrollPane1.setViewportView(debugArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        socket.close();
        wpadre.setEnabled(true);
        wpadre.requestFocus();
        wpadre.wclosed(this);
    }//GEN-LAST:event_formWindowClosing

    // esperar a que lleguen los paquetes del Servidor, mostrar el contenido de los paquetes
    private void clientHello() {
        debugArea.append("Conectando con el servidor... ");
        try {
            enviarMensaje("ClientHello");
            System.out.println("CLIENTE: ClientHello enviado");

            //esperamos ServerHello
            esperarMensaje("ServerHello");
            System.out.println("CLIENTE: ServerHello recibido");                               
            debugArea.append("Conexión establecida\n");               
            
        } catch(Exception excepcion) {
            debugArea.append("Error al conectar con el servidor\n");
            excepcion.printStackTrace();
        }
    }

    private void esperarClave() {
        debugArea.append("\nRecibiendo clave inicial... ");
        try {
            //creamos un DatagramPacket para recibir la clave
            //clave de 128 bits
            DatagramPacket clavePacket = new DatagramPacket(new byte[16],16);
            //desbloqueamos al servidor antes de recibir
            enviarMensaje("OK");
            System.out.println("CLIENTE: OK enviado");
            socket.receive(clavePacket);
            System.out.println("CLIENTE: Clave recibida");

            claveInicial = clavePacket.getData();

            //mandamos un mensaje de confirmación de recepción de clave al servidor
            enviarMensaje("ClaveOK");
            System.out.println("CLIENTE: ClaveOK enviado");

            //creamos un DatagramPacket para recibir el número de claves
            int len = Long.SIZE/8;
            DatagramPacket longPacket = new DatagramPacket(new byte[len], len);
            socket.receive(longPacket);
            System.out.println("CLIENTE: Long recibido");

            numClaves = Conversor.byteToLong(longPacket.getData());

            //mandamos un mensaje de confirmación de recepción de número de claves al servidor
            enviarMensaje("LongOK");
            System.out.println("CLIENTE: LongOK enviado");

            debugArea.append("Clave recibida\n");

        } catch (Exception e) {
            debugArea.append("Error al recibir la clave");
            e.printStackTrace();
        }

    }

    private void esperarTexto () {
        debugArea.append("\nRecibiendo texto... ");
        try {
            //creamos un DatagramPacket para recibir el texto en claro
            DatagramPacket claroPacket = new DatagramPacket(new byte[16],16);
            socket.receive(claroPacket);
            System.out.println("CLIENTE: Texto en claro recibido");

            plaintext = claroPacket.getData();

            //mandamos un mensaje de confirmación de recepción de clave al servidor
            enviarMensaje("ClaroOK");
            System.out.println("CLIENTE: ClaroOK enviado");

            //recibimos el texto cifrado
            DatagramPacket cifradoPacket = new DatagramPacket(new byte[16],16);
            socket.receive(cifradoPacket);
            System.out.println("CLIENTE: Texto cifrado recibido");

            ciphertext = cifradoPacket.getData();

            //mandamos un mensaje de confirmación de recepción de número de claves al servidor
            enviarMensaje("CifradoOK");
            System.out.println("CLIENTE: CifradoOK enviado");

            debugArea.append("Texto recibido\n");

        } catch (Exception e) {
            debugArea.append("Error al recibir el texto");
            e.printStackTrace();
        }
    }

    private void enviarMensaje(String mensaje)
            throws IOException {
        //generamos el datagrama con el mensaje a enviar
        DatagramPacket toSend = new DatagramPacket(mensaje.getBytes(), mensaje.length(),
                servIP, 3000);

        socket.send(toSend);
    }

    private void esperarMensaje (String mensaje) throws Exception {
        int len = mensaje.length();
        DatagramPacket received = new DatagramPacket(new byte[len],len);

        socket.receive(received);

        String aux = new String(received.getData(), 0, received.getLength());
        if (!aux.equals(mensaje))
            throw new Exception("Se ha recibido " + aux + " cuando se esperaba " + mensaje);
        else System.out.println("SERVIDOR:" + mensaje + "recibido");
    }

    private byte [] getNextKey (byte [] clave) 
            throws java.lang.IndexOutOfBoundsException {
        int lastIndex = clave.length - 1;
        /*
         * si en la última posición del array (donde se encuentra el byte de
         * menor peso) hemos alcanzado el valor máximo (-1),
         * la ponemos a 0 (sumando 1) y aumentamos en uno el valor del byte de
         * peso inmediatamente mayor.
         */        
        if (clave[lastIndex] == -1) {
            int i;
            /*
             * mientras el byte de peso inmediatamente mayor haya alcanzado
             * también su valor máximo, recorremos el array reiniciando a 0
             * todos los bytes hasta encontrar el primero en el que podamos
             * incrementar su valor
             */
            for (i = lastIndex; (i >= 0) && (clave[i] == -1); i--)
                clave[i]++;

            if (i < 0)
                throw new java.lang.IndexOutOfBoundsException("Last key possible reached");
            else
                clave[i]++;
        } else
            clave[lastIndex]++;

        return clave;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea debugArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
