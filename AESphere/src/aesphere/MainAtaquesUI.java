
package aesphere;

import java.io.File;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author antonio
 */
public class MainAtaquesUI extends javax.swing.JFrame {

    private MainUI wpadre;
    private javax.swing.JFileChooser archivos;

    /** Creates new form MainAtaquesUI */
    public MainAtaquesUI(MainUI padre) {
        initComponents();
        wpadre = padre;
        ButtonGroup group = new ButtonGroup();
        group.add(ClienteRadioButton);
        group.add(ServidorRadioButton);
        this.setSize(850, 730);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        entradaPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        plainLabel = new javax.swing.JLabel();
        cipherLabel = new javax.swing.JLabel();
        plainComboBox = new javax.swing.JComboBox();
        plainBrowseButton = new javax.swing.JButton();
        cipherComboBox = new javax.swing.JComboBox();
        cipherBrowseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        EjecutarButton = new javax.swing.JButton();
        funcionamientoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ServidorRadioButton = new javax.swing.JRadioButton();
        IPLabel = new javax.swing.JLabel();
        IPTextField = new javax.swing.JTextField();
        ClienteRadioButton = new javax.swing.JRadioButton();
        clientesLabel = new javax.swing.JLabel();
        NumeroClientesTextField = new javax.swing.JTextField();
        modoLabel = new javax.swing.JLabel();
        modoComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        BotonInfo = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        clavesPanel = new javax.swing.JPanel();
        ClaveFinalTextField = new javax.swing.JTextField();
        claveInicialLabel = new javax.swing.JLabel();
        claveFinalLabel = new javax.swing.JLabel();
        ClaveInicialTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ivTextField = new javax.swing.JTextField();
        clavesComboBox = new javax.swing.JComboBox();
        ivLabel = new javax.swing.JLabel();
        formatoClavesLabel = new javax.swing.JLabel();
        claveSizeComboBox = new javax.swing.JComboBox();
        cifrarMenuBarMain = new javax.swing.JMenuBar();
        mainMenuArchivo = new javax.swing.JMenu();
        Salir = new javax.swing.JMenuItem();
        mainMenuEditar = new javax.swing.JMenu();
        mainMenuAyuda = new javax.swing.JMenu();
        Contenidos = new javax.swing.JMenuItem();
        acercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        entradaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ENTRADA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        cipherTextArea.setColumns(20);
        cipherTextArea.setRows(5);
        jScrollPane2.setViewportView(cipherTextArea);

        plainTextArea.setColumns(20);
        plainTextArea.setRows(5);
        jScrollPane1.setViewportView(plainTextArea);

        plainLabel.setText("Texto en claro: ");

        cipherLabel.setText("Texto cifrado: ");

        plainComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Texto ASCII", "Hexadecimal", "Archivo" }));
        plainComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainComboBoxActionPerformed(evt);
            }
        });

        plainBrowseButton.setText("Browse");
        plainBrowseButton.setEnabled(false);
        plainBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainBrowseButtonActionPerformed(evt);
            }
        });

        cipherComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Base64", "Hexadecimal", "Archivo" }));
        cipherComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherComboBoxActionPerformed(evt);
            }
        });

        cipherBrowseButton.setText("Browse");
        cipherBrowseButton.setEnabled(false);
        cipherBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherBrowseButtonActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botondef2.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout entradaPanelLayout = new org.jdesktop.layout.GroupLayout(entradaPanel);
        entradaPanel.setLayout(entradaPanelLayout);
        entradaPanelLayout.setHorizontalGroup(
            entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(entradaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(entradaPanelLayout.createSequentialGroup()
                        .add(plainComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(plainBrowseButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(plainLabel))
                .add(18, 18, 18)
                .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(entradaPanelLayout.createSequentialGroup()
                            .add(cipherComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(cipherBrowseButton))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 286, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(cipherLabel))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        entradaPanelLayout.setVerticalGroup(
            entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(entradaPanelLayout.createSequentialGroup()
                .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(entradaPanelLayout.createSequentialGroup()
                        .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(plainLabel)
                            .add(cipherLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cipherBrowseButton)
                            .add(plainComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(plainBrowseButton)
                            .add(cipherComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(entradaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jLabel5))
                .addContainerGap())
        );

        EjecutarButton.setText("Ejecutar");
        EjecutarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutarButtonActionPerformed(evt);
            }
        });

        funcionamientoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FUNCIONAMIENTO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jLabel1.setText("Este equipo funcionará como:");

        ServidorRadioButton.setSelected(true);
        ServidorRadioButton.setText("Servidor");
        ServidorRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServidorRadioButtonActionPerformed(evt);
            }
        });

        IPLabel.setText("Introduce la dirección IP del Servidor:");
        IPLabel.setEnabled(false);

        IPTextField.setEnabled(false);
        IPTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPTextFieldActionPerformed(evt);
            }
        });

        ClienteRadioButton.setText("Cliente");
        ClienteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClienteRadioButtonActionPerformed(evt);
            }
        });

        clientesLabel.setText("Introduce el número de clientes:");

        modoLabel.setText("Selecciona el modo de cifrado:");

        modoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ECB", "CBC" }));
        modoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botondef1.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout funcionamientoPanelLayout = new org.jdesktop.layout.GroupLayout(funcionamientoPanel);
        funcionamientoPanel.setLayout(funcionamientoPanelLayout);
        funcionamientoPanelLayout.setHorizontalGroup(
            funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(funcionamientoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(33, 33, 33)
                .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(funcionamientoPanelLayout.createSequentialGroup()
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ServidorRadioButton)
                            .add(ClienteRadioButton))
                        .add(37, 37, 37)
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(clientesLabel)
                            .add(modoLabel)
                            .add(IPLabel))
                        .add(35, 35, 35)
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(IPTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(NumeroClientesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(modoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        funcionamientoPanelLayout.setVerticalGroup(
            funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(funcionamientoPanelLayout.createSequentialGroup()
                .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(funcionamientoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ServidorRadioButton)
                            .add(clientesLabel)
                            .add(NumeroClientesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(modoLabel)
                            .add(modoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(funcionamientoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(IPTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(IPLabel)
                            .add(ClienteRadioButton)))
                    .add(jLabel2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BotonInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/info.png"))); // NOI18N
        BotonInfo.setBorder(null);
        BotonInfo.setContentAreaFilled(false);

        Cancelar.setLabel("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        clavesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ESPACIO DE CLAVES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        ClaveFinalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClaveFinalTextFieldActionPerformed(evt);
            }
        });

        claveInicialLabel.setText("Clave inicial: ");

        claveFinalLabel.setText("Clave final:  ");

        ClaveInicialTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClaveInicialTextFieldActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botondef3.png"))); // NOI18N

        ivTextField.setEnabled(false);
        ivTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ivTextFieldActionPerformed(evt);
            }
        });

        clavesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hexadecimal", "ASCII" }));

        ivLabel.setText("Vector de inicialización (Hex):");
        ivLabel.setEnabled(false);

        formatoClavesLabel.setText("Formato de claves:");

        claveSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "128 bits", "192 bits", "256 bits" }));

        org.jdesktop.layout.GroupLayout clavesPanelLayout = new org.jdesktop.layout.GroupLayout(clavesPanel);
        clavesPanel.setLayout(clavesPanelLayout);
        clavesPanelLayout.setHorizontalGroup(
            clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(clavesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel9)
                .add(18, 18, 18)
                .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ivLabel)
                    .add(claveInicialLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(claveFinalLabel))
                .add(18, 18, 18)
                .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ClaveInicialTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .add(clavesPanelLayout.createSequentialGroup()
                        .add(formatoClavesLabel)
                        .add(18, 18, 18)
                        .add(clavesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(claveSizeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(ClaveFinalTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ivTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .add(148, 148, 148))
        );
        clavesPanelLayout.setVerticalGroup(
            clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(clavesPanelLayout.createSequentialGroup()
                .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(clavesPanelLayout.createSequentialGroup()
                        .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(formatoClavesLabel)
                            .add(clavesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(claveSizeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ClaveInicialTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(claveInicialLabel))
                        .add(9, 9, 9)
                        .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ClaveFinalTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(claveFinalLabel))
                        .add(18, 18, 18)
                        .add(clavesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ivLabel)
                            .add(ivTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jLabel9))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(Cancelar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(EjecutarButton)
                        .add(14, 14, 14))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, entradaPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, funcionamientoPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, clavesPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(4, 4, 4)
                .add(BotonInfo)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(BotonInfo)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(funcionamientoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(11, 11, 11)
                        .add(entradaPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(11, 11, 11)
                        .add(clavesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(EjecutarButton)
                            .add(Cancelar))))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel1);

        mainMenuArchivo.setText("Archivo");

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        mainMenuArchivo.add(Salir);

        cifrarMenuBarMain.add(mainMenuArchivo);

        mainMenuEditar.setText("Editar");
        cifrarMenuBarMain.add(mainMenuEditar);

        mainMenuAyuda.setText("Ayuda");

        Contenidos.setText("Contenidos");
        Contenidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContenidosActionPerformed(evt);
            }
        });
        mainMenuAyuda.add(Contenidos);

        acercade.setText("Acerca de");
        mainMenuAyuda.add(acercade);

        cifrarMenuBarMain.add(mainMenuAyuda);

        setJMenuBar(cifrarMenuBarMain);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean ComprobarDatos () {

        boolean aux = true;
        int blockIndex = modoComboBox.getSelectedIndex();
        int plainIndex = plainComboBox.getSelectedIndex();

        if ( aux && (plainTextArea.getText().isEmpty() || cipherTextArea.getText().isEmpty()) ){
           JOptionPane.showMessageDialog(this, "Tiene que rellenar todos los campos",
                   "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
           aux=false;
        }

        if ( aux && NumeroClientesTextField.getText().isEmpty() ){
           JOptionPane.showMessageDialog(this, "Tiene que introducir el número de clientes",
                   "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
           aux=false;
        }

        if ( aux && (blockIndex == 1) && ivTextField.getText().isEmpty()) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Tiene que introducir el vector de inicialización",
                   "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && !comprobarNumero(NumeroClientesTextField.getText()) ) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Tiene que introducir un número en el número de clientes",
                   "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && (plainIndex == 0) && (plainTextArea.getText().length() > 1024) ) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Sólo puede introducir como " +
                    "máximo 1024 caracteres en la entrada", "Ataques - Aviso",
                    JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && (plainIndex == 1) && !ComprobarHexadecimal(plainTextArea.getText()));

        return aux;
    }

    private boolean comprobarNumero (String num) {
        boolean aux = true;

        for (int i = num.length(); aux && (--i >= 0);) {
            char c = num.charAt(i);
            if (c < '0' || c > '9') aux = false;
        }

        return aux;
    }

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed

        this.dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSING));
}//GEN-LAST:event_SalirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        wpadre.setEnabled(true);
        wpadre.requestFocus();
        wpadre.wclosed(this);
    }//GEN-LAST:event_formWindowClosing

    private void ServidorRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServidorRadioButtonActionPerformed
        IPTextField.setEnabled(false);
        IPLabel.setEnabled(false);
        clavesPanel.setEnabled(true);
        entradaPanel.setEnabled(true);
        cipherTextArea.setEnabled(true);
        ClaveFinalTextField.setEnabled(true);
        ClaveInicialTextField.setEnabled(true);
        plainTextArea.setEnabled(true);
        cipherComboBox.setEnabled(true);
        cipherLabel.setEnabled(true);
        claveFinalLabel.setEnabled(true);
        claveInicialLabel.setEnabled(true);
        clavesComboBox.setEnabled(true);
        clavesPanel.setEnabled(true);
        entradaPanel.setEnabled(true);
        ivLabel.setEnabled(false);
        ivTextField.setEnabled(false);
        NumeroClientesTextField.setEnabled(true);
        clientesLabel.setEnabled(true);
        modoComboBox.setEnabled(true);
        modoLabel.setEnabled(true);        
        plainComboBox.setEnabled(true);
        plainLabel.setEnabled(true);
        claveSizeComboBox.setEnabled(true);
        formatoClavesLabel.setEnabled(true);
        plainComboBox.setSelectedIndex(0);
        cipherComboBox.setSelectedIndex(0);
        modoComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_ServidorRadioButtonActionPerformed

    private void IPTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IPTextFieldActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed

        this.dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSING));
}//GEN-LAST:event_CancelarActionPerformed

    private void ClienteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClienteRadioButtonActionPerformed
        IPTextField.setEnabled(true);
        IPLabel.setEnabled(true);
        clavesPanel.setEnabled(false);
        entradaPanel.setEnabled(false);
        cipherTextArea.setEnabled(false);
        ClaveFinalTextField.setEnabled(false);
        ClaveInicialTextField.setEnabled(false);
        plainTextArea.setEnabled(false);
        cipherComboBox.setEnabled(false);
        cipherLabel.setEnabled(false);
        claveFinalLabel.setEnabled(false);
        claveInicialLabel.setEnabled(false);
        clavesComboBox.setEnabled(false);
        clavesPanel.setEnabled(false);
        entradaPanel.setEnabled(false);
        ivLabel.setEnabled(false);
        ivTextField.setEnabled(false);
        NumeroClientesTextField.setEnabled(false);
        clientesLabel.setEnabled(false);
        modoComboBox.setEnabled(false);
        modoLabel.setEnabled(false);
        plainBrowseButton.setEnabled(false);
        cipherBrowseButton.setEnabled(false);
        plainComboBox.setEnabled(false);
        plainLabel.setEnabled(false);
        claveSizeComboBox.setEnabled(false);
        formatoClavesLabel.setEnabled(false);
    }//GEN-LAST:event_ClienteRadioButtonActionPerformed

    private void EjecutarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutarButtonActionPerformed
        if (ServidorRadioButton.isSelected() && ComprobarDatos()) {
            byte [] claveinicial = null;
            byte [] clavefinal = null;
            int op = 0;            

            if (ComprobarClaves()) {
                switch (clavesComboBox.getSelectedIndex()) {
                    case 0: claveinicial = Conversor.hexStringToByte(ClaveInicialTextField.getText());
                            clavefinal = Conversor.hexStringToByte(ClaveFinalTextField.getText());
                            break;

                    case 1: claveinicial = Conversor.stringToASCII(ClaveInicialTextField.getText());
                            clavefinal = Conversor.stringToASCII(ClaveFinalTextField.getText());
                }

                //calculamos aproximadamente el número de claves a probar por cliente para avisar si son demasiadas
                final long numClaves = getKeysToTry(claveinicial, clavefinal);
                final int numClientes = Integer.parseInt(NumeroClientesTextField.getText());

                long clavesCliente = numClaves / numClientes;
                if ( clavesCliente >= 900000 )
                    op = JOptionPane.showConfirmDialog(this, "Con el espectro de claves" +
                            " elegido podrían tardarse más de 10 minutos en terminar el proceso. " +
                            "\n¿Está seguro de que desea continuar?",
                            "Ataques - Confirmación", JOptionPane.YES_NO_OPTION);
                else if ( clavesCliente <= 0 )
                    JOptionPane.showMessageDialog(this, "Espectro de claves " +
                            "incorrecto.\nRevise la clave inicial y final.", 
                            "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
                
                final byte [] claveini = claveinicial;                

                if (op == 0) {
                    Thread servThread = new Thread(new Runnable() {
                        public void run() {
                            new ServUI(wpadre, plainTextArea.getText(), cipherTextArea.getText(),
                                    numClientes, claveini, numClaves,
                                    modoComboBox.getSelectedIndex(), ivTextField.getText());
                        }
                    });
                    wpadre.newThread(servThread);
                    servThread.start();
                }
            }
        } else {
            if (ClienteRadioButton.isSelected() && IPTextField.getText().isEmpty())
                JOptionPane.showMessageDialog(this, "Debde rellenar la IP del servidor",
                        "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            else{
                Thread clientThread = new Thread(new Runnable() {
                    public void run() {
                        try {
                            new ClientUI(wpadre, java.net.InetAddress.getByName(IPTextField.getText()));
                        } catch (java.net.UnknownHostException e) {
                            JOptionPane.showMessageDialog(null, "Error en la IP del servidor");
                           Thread.currentThread().interrupt();
                        }
                    }
                });
                wpadre.newThread(clientThread);
                clientThread.start();
            }
        }
    }//GEN-LAST:event_EjecutarButtonActionPerformed

    private void ClaveInicialTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClaveInicialTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClaveInicialTextFieldActionPerformed

    private void ClaveFinalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClaveFinalTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClaveFinalTextFieldActionPerformed

    private void ContenidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContenidosActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ContenidosActionPerformed

    private void ivTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ivTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ivTextFieldActionPerformed

    private void modoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoComboBoxActionPerformed
        switch (modoComboBox.getSelectedIndex()) {

            case 0: ivLabel.setEnabled(false);
                    ivTextField.setEnabled(false);
                    break;

            case 1: ivLabel.setEnabled(true);
                    ivTextField.setEnabled(true);
        }
    }//GEN-LAST:event_modoComboBoxActionPerformed

    private void plainComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainComboBoxActionPerformed
        switch (plainComboBox.getSelectedIndex()) {

            case 0:plainTextArea.setEditable(true);
                   plainTextArea.setText("");
                   plainBrowseButton.setEnabled(false);
                   break;

            case 1:plainTextArea.setEditable(true);
                   plainTextArea.setText("");
                   plainBrowseButton.setEnabled(false);
                   break;

            case 2:plainTextArea.setEditable(false);
                   plainTextArea.setText("");
                   plainBrowseButton.setEnabled(true);
        }
    }//GEN-LAST:event_plainComboBoxActionPerformed

    private void cipherComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherComboBoxActionPerformed
        switch (cipherComboBox.getSelectedIndex()) {

            case 0:cipherTextArea.setEditable(true);
                   cipherTextArea.setText("");
                   cipherBrowseButton.setEnabled(false);
                   break;

            case 1:cipherTextArea.setEditable(true);
                   cipherTextArea.setText("");
                   cipherBrowseButton.setEnabled(false);
                   break;

            case 2:cipherTextArea.setEditable(false);
                   cipherTextArea.setText("");
                   cipherBrowseButton.setEnabled(true);
        }
    }//GEN-LAST:event_cipherComboBoxActionPerformed

    private void plainBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainBrowseButtonActionPerformed
        int resul = archivos.showSaveDialog(null);
        File archi= archivos.getSelectedFile();
        if (resul == JFileChooser.APPROVE_OPTION) plainTextArea.setText(archi.getPath());
    }//GEN-LAST:event_plainBrowseButtonActionPerformed

    private void cipherBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherBrowseButtonActionPerformed
        int resul = archivos.showSaveDialog(null);
        File archi= archivos.getSelectedFile();
        if (resul == JFileChooser.APPROVE_OPTION) cipherTextArea.setText(archi.getPath());
    }//GEN-LAST:event_cipherBrowseButtonActionPerformed

    private long getKeysToTry (byte [] iniClave, byte [] finClave) {
         int len = iniClave.length;
         long numKeys = 0;

         for (int i = 0; i < len; i++) {
             numKeys <<= 8;
             numKeys += (Conversor.byteToInt(finClave[i]) - Conversor.byteToInt(iniClave[i]));
         }

         //como incluimos en la prueba la clave inicial y final, hay que sumar uno al resultado
         numKeys++;

         return numKeys;
     }

    private boolean ComprobarHexadecimal (String cadena){

    boolean resul = true;

    for (int i = 0; i < cadena.length() ; i++){

      if ( ((cadena.charAt(i) >= 'A') && (cadena.charAt(i) <= 'F')) ||
          ((cadena.charAt(i) >= 'a') && (cadena.charAt(i) <= 'f')) ||
          ((cadena.charAt(i) >= '0') && (cadena.charAt(i) <= '9')));
      else {
          resul=false;
      }
    }

    return resul;
    }

    private boolean ComprobarClaves () {
        boolean aux = true;
        int indexFormat = clavesComboBox.getSelectedIndex();
        int indexSize = claveSizeComboBox.getSelectedIndex();

        if ( aux && ClaveInicialTextField.getText().isEmpty() ) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Debe rellenar todos los campos",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && ClaveFinalTextField.getText().isEmpty() ) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Debe rellenar todos los campos",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && (indexFormat == 0) && !ComprobarHexadecimal(ClaveInicialTextField.getText() )) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if ( aux && (indexFormat == 0) && !ComprobarHexadecimal(ClaveFinalTextField.getText()) ) {
            aux = false;
            JOptionPane.showMessageDialog(this, "Debe introducir un valor hexadecimal en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
        }

        if (aux && (indexSize == 0) ) {

            if (aux && (indexFormat == 0) && (ClaveInicialTextField.getText().length() != 32) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 32 dígitos hexadecimales en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if ( aux && (indexFormat == 0) && (ClaveFinalTextField.getText().length() != 32) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 32 dígitos hexadecimales en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveInicialTextField.getText().length() != 16) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 16 caracteres ASCII en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveFinalTextField.getText().length() != 16) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 16 caracteres ASCII en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

        if ( aux && (indexSize == 1) ) {

            if (aux && (indexFormat == 0) && (ClaveInicialTextField.getText().length() != 48) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 48 dígitos hexadecimales en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if ( aux && (indexFormat == 0) && (ClaveFinalTextField.getText().length() != 48) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 48 dígitos hexadecimales en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveInicialTextField.getText().length() != 24) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 24 caracteres ASCII en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveFinalTextField.getText().length() != 24) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 24 caracteres ASCII en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

        if ( aux && (indexSize == 2) ) {

            if (aux && (indexFormat == 0) && (ClaveInicialTextField.getText().length() != 64) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 64 dígitos hexadecimales en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if ( aux && (indexFormat == 0) && (ClaveFinalTextField.getText().length() != 64) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 64 dígitos hexadecimales en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveInicialTextField.getText().length() != 32) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 32 caracteres ASCII en la clave inicial",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }

            if (aux && (indexFormat == 1) && (ClaveFinalTextField.getText().length() != 32) ) {
                aux = false;
                JOptionPane.showMessageDialog(this, "Debe introducir 32 caracteres ASCII en la clave final",
                    "Ataques - Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
        return aux;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonInfo;
    private javax.swing.JButton Cancelar;
    private javax.swing.JTextField ClaveFinalTextField;
    private javax.swing.JTextField ClaveInicialTextField;
    private javax.swing.JRadioButton ClienteRadioButton;
    private javax.swing.JMenuItem Contenidos;
    private javax.swing.JButton EjecutarButton;
    private javax.swing.JLabel IPLabel;
    private javax.swing.JTextField IPTextField;
    private javax.swing.JTextField NumeroClientesTextField;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JRadioButton ServidorRadioButton;
    private javax.swing.JMenuItem acercade;
    private javax.swing.JMenuBar cifrarMenuBarMain;
    private javax.swing.JButton cipherBrowseButton;
    private javax.swing.JComboBox cipherComboBox;
    private javax.swing.JLabel cipherLabel;
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JLabel claveFinalLabel;
    private javax.swing.JLabel claveInicialLabel;
    private javax.swing.JComboBox claveSizeComboBox;
    private javax.swing.JComboBox clavesComboBox;
    private javax.swing.JPanel clavesPanel;
    private javax.swing.JLabel clientesLabel;
    private javax.swing.JPanel entradaPanel;
    private javax.swing.JLabel formatoClavesLabel;
    private javax.swing.JPanel funcionamientoPanel;
    private javax.swing.JLabel ivLabel;
    private javax.swing.JTextField ivTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu mainMenuArchivo;
    private javax.swing.JMenu mainMenuAyuda;
    private javax.swing.JMenu mainMenuEditar;
    private javax.swing.JComboBox modoComboBox;
    private javax.swing.JLabel modoLabel;
    private javax.swing.JButton plainBrowseButton;
    private javax.swing.JComboBox plainComboBox;
    private javax.swing.JLabel plainLabel;
    private javax.swing.JTextArea plainTextArea;
    // End of variables declaration//GEN-END:variables

}
