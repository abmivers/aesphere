/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProcesoCifrarUI.java
 *
 * Created on 27-may-2010, 16:06:21
 */

package aesphere;

import java.io.File;
import javax.swing.JOptionPane;


/**
 *
 * @author antonio
 */
public class ProcesoDescifrarDirectoUI extends javax.swing.JFrame {

    private String cadenaInput;
    private String cadenaKey;
    private String cadenaOutput;
    private MainUI wpadre;
    private int tamanoclave;

    /** Creates new form ProcesoDescifrarUI */
    public ProcesoDescifrarDirectoUI(MainUI padre,String Texto1, String Texto2, String Texto3,int opcionentrada,int opcionkey,int opcionsalida,int tamano) {
        initComponents();
        wpadre=padre;
        cadenaInput = Texto1;
        cadenaKey = Texto2;
        cadenaOutput = Texto3;
        tamanoclave = tamano;

        this.setSize(550, 300);

        byte[] salida = new byte[16];

        if (opcionentrada==2 & opcionkey==2){
            salida=descifrarArchivoArchivo();
        }

         if (opcionentrada==1 & opcionkey==1){
            salida=descifrarHexaHexa();
        }

         if (opcionentrada==2 & opcionkey==1){
            salida=descifrarArchivoHexa();
        }

         if (opcionentrada==1 & opcionkey==2){
            salida=descifrarHexaArchivo();
        }

         if (opcionentrada==0 & opcionkey==0){
            salida=descifrarTextoTexto();
        }

         if (opcionentrada==0 & opcionkey==1){
            salida=descifrarTextoHexa();
        }

         if (opcionentrada==0 & opcionkey==2){
            salida=descifrarTextoArchivo();
        }

         if (opcionentrada==1 & opcionkey==0){
            salida=descifrarHexaTexto();
        }

         if (opcionentrada==2 & opcionkey==0){
            salida=descifrarArchivoTexto();
        }

        

        
        if (salida == null) {
            this.setVisible(false);
            
            JOptionPane.showMessageDialog(this, "Error de Descifrado. Compruebe que ha introducido correctamente los datos");
            

        } else {
            if (opcionsalida==0)
                TextoSalida.setText(Conversor.byteToTextString(salida).trim());
            else if (opcionsalida == 1)
                TextoSalida.setText(Conversor.byteToHexString(salida));
            else if (opcionsalida==2) {
                Conversor.byteToFile(salida,cadenaOutput) ;
                TextoSalida.setText(Conversor.byteToTextString(salida));
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        TextoSalida = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TextoSalida1 = new javax.swing.JTextArea();
        cifradoMenuBarMain = new javax.swing.JMenuBar();
        mainMenuArchivoCifrado = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenuItem();
        mainMenuEditarCifrado = new javax.swing.JMenu();
        mainMenuOperacionesCifrado = new javax.swing.JMenu();
        mainMenuAyudaCifrado = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AESphere - Proceso Descifrado");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TextoSalida.setColumns(20);
        TextoSalida.setLineWrap(true);
        TextoSalida.setRows(5);
        jScrollPane3.setViewportView(TextoSalida);

        jLabel3.setText("Ciphertext:");

        jLabel1.setText("Plaintext:");

        TextoSalida1.setColumns(20);
        TextoSalida1.setLineWrap(true);
        TextoSalida1.setRows(5);
        jScrollPane4.setViewportView(TextoSalida1);

        mainMenuArchivoCifrado.setText("Archivo");

        jMenuItem2.setText("jMenuItem2");
        mainMenuArchivoCifrado.add(jMenuItem2);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        mainMenuArchivoCifrado.add(Salir);

        cifradoMenuBarMain.add(mainMenuArchivoCifrado);

        mainMenuEditarCifrado.setText("Editar");
        cifradoMenuBarMain.add(mainMenuEditarCifrado);

        mainMenuOperacionesCifrado.setText("Operaciones");
        cifradoMenuBarMain.add(mainMenuOperacionesCifrado);

        mainMenuAyudaCifrado.setText("Ayuda");
        cifradoMenuBarMain.add(mainMenuAyudaCifrado);

        setJMenuBar(cifradoMenuBarMain);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(34, 34, 34)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(352, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        wpadre.setEnabled(true);
        wpadre.requestFocus();
        wpadre.wclosed(this);       
    }//GEN-LAST:event_formWindowClosing


    private byte [] descifrarArchivoTexto (){

        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        switch (tamanoclave) {

            case 128: {
                a1 = 16;
                a2 = 16;
                a3 = 4;
                break;
                }

            case 192: {
                a1 = 16;
                a2 = 24;
                a3 = 6;
                break;
                }

            case 256: {
                a1 = 16;
                a2 = 32;
                a3 = 8;
                break;
                }

        }

        byte [] in = null;

        try {
         in = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaInput));
        }
        catch (Exception e){
            e.printStackTrace();
        }

        byte[] key = Conversor.stringToASCII(cadenaKey);
        if (key.length != a2) key = Conversor.pad(key, a2);

        BlockManager aesenc = new BlockManager(key, a3, 16);

        byte[] out = aesenc.ECB(in, false);
        
        return Conversor.unpad(out, 16);
    }

    private byte[] descifrarHexaTexto (){

        int a = 0;
      int b = 0;

      if (tamanoclave == 128) {
           a=16;
           b=4;
      }

      if (tamanoclave == 192) {
           a=24;
           b=6;
      }

      if (tamanoclave == 256) {
           a=32;
           b=8;
      }

      byte[] in = Conversor.hexStringToByte(cadenaInput);
      byte[] key = Conversor.stringToASCII(cadenaKey);
      if (key.length != a) key = Conversor.pad(key, a);

      BlockManager aesenc = new BlockManager(key, b, 16);

      byte[] out = aesenc.ECB(in, false);

      return Conversor.unpad(out, 16);
    }

    private byte[] descifrarTextoArchivo (){

        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        switch (tamanoclave) {

            case 128: {
                a1 = 16;
                a2 = 16;
                a3 = 4;
                break;
                }

            case 192: {
                a1 = 16;
                a2 = 24;
                a3 = 6;
                break;
                }

            case 256: {
                a1 = 16;
                a2 = 32;
                a3 = 8;
                break;
                }

        }

        byte[] in = Conversor.stringToASCII(cadenaInput);

        byte [] key = null;
        try {
         key = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaKey));
        }
        catch (Exception e){
            e.printStackTrace();
        }

        if (key.length != a2) key = Conversor.pad(key, a2);

        BlockManager aesenc = new BlockManager(key, a3, 16);

        byte[] out = aesenc.ECB(in, false);

        return Conversor.unpad(out, 16);
    }

    private byte[] descifrarTextoHexa (){
      int a = 0;
      int b = 0;

      if (tamanoclave == 128) {
           a=16;
           b=4;
      }

      if (tamanoclave == 192) {
           a=24;
           b=6;
      }

      if (tamanoclave == 256) {
           a=32;
           b=8;
      }

      byte[] in = Conversor.stringToASCII(cadenaInput);
      byte[] key = Conversor.hexStringToByte(cadenaKey);
      if (key.length != a) key = Conversor.pad(key, a);

      BlockManager aesenc = new BlockManager(key, b, 16);
      byte[] out = aesenc.ECB(in, false);

      return Conversor.unpad(out, 16);
    }

    private byte[] descifrarTextoTexto (){
      int a = 0;
      int b = 0;

      if (tamanoclave == 128) {
           a=16;
           b=4;
      }

      if (tamanoclave == 192) {
           a=24;
           b=6;
      }

      if (tamanoclave == 256) {
           a=32;
           b=8;
      }

      byte[] in = Conversor.stringToASCII(cadenaInput);
      byte[] key = Conversor.stringToASCII(cadenaKey);
      if (key.length != a) key = Conversor.pad(key, a);

      BlockManager aesenc = new BlockManager(key, b, 16);
      byte[] out = aesenc.ECB(in, false);

      return Conversor.unpad(out, 16);
    }



    private byte[] descifrarHexaArchivo(){

        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        switch (tamanoclave) {

            case 128: {
                a1 = 16;
                a2 = 16;
                a3 = 4;
                break;
                }

            case 192: {
                a1 = 16;
                a2 = 24;
                a3 = 6;
                break;
                }

            case 256: {
                a1 = 16;
                a2 = 32;
                a3 = 8;
                break;
                }

        }

        byte[] in = Conversor.hexStringToByte(cadenaInput);

        byte [] key = null;
        try {
         key = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaKey));
        }
        catch (Exception e){
            e.printStackTrace();
        }

        if (key.length != a2) key = Conversor.pad(key, a2);

        BlockManager aesenc = new BlockManager(key, a3, 16);

        byte[] out = aesenc.ECB(in, false);

        return Conversor.unpad(out, 16);
    }

    private byte[] descifrarArchivoHexa (){

        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        switch (tamanoclave) {

            case 128: {
                a1 = 16;
                a2 = 16;
                a3 = 4;
                break;
                }

            case 192: {
                a1 = 16;
                a2 = 24;
                a3 = 6;
                break;
                }

            case 256: {
                a1 = 16;
                a2 = 32;
                a3 = 8;
                break;
                }

        }

        byte [] in = null;
        try {
         in = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaInput));
        }
        catch (Exception e){
            e.printStackTrace();
        }

        byte[] key = Conversor.hexStringToByte(cadenaKey);
        if (key.length != a2) key = Conversor.pad(key, a2);

        BlockManager aesenc = new BlockManager(key, a3, 16);

        byte[] out = aesenc.ECB(in, false);

        return Conversor.unpad(out, 16);
    }


    private byte[] descifrarHexaHexa (){

      int a = 0;
      int b = 0;

      if (tamanoclave == 128) {
           a=16;
           b=4;
      }

      if (tamanoclave == 192) {
           a=24;
           b=6;
      }

      if (tamanoclave == 256) {
           a=32;
           b=8;
      }

      byte[] in = Conversor.hexStringToByte(cadenaInput);
      byte[] key = Conversor.hexStringToByte(cadenaKey);
      if (key.length != a) key = Conversor.pad(key, a);

      BlockManager aesenc = new BlockManager(key, b, 16);
      byte[] out = aesenc.ECB(in, false);
      
      return Conversor.unpad(out, 16);
    }




    private byte[] descifrarArchivoArchivo (){

        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        switch (tamanoclave) {

            case 128: {
                a1 = 16;
                a2 = 16;
                a3 = 4;
                break;
                }

            case 192: {
                a1 = 16;
                a2 = 24;
                a3 = 6;
                break;
                }

            case 256: {
                a1 = 16;
                a2 = 32;
                a3 = 8;
                break;
                }

        }

        byte [] in = null;
        byte [] key = null;
        try {
         in = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaInput));
         key = ReadFileIntoByteArray.getBytesFromFile(new File(cadenaKey));
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
        key = Conversor.pad(key, a2);

      BlockManager aesenc = new BlockManager(key, a3, 16);

      byte[] out = aesenc.ECB(in, false);

      return Conversor.unpad(out, 16);
    }



    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        this.dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSED));
}//GEN-LAST:event_SalirActionPerformed

    /**
    * @param args the command line arguments
    */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Salir;
    private javax.swing.JTextArea TextoSalida;
    private javax.swing.JTextArea TextoSalida1;
    private javax.swing.JMenuBar cifradoMenuBarMain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenu mainMenuArchivoCifrado;
    private javax.swing.JMenu mainMenuAyudaCifrado;
    private javax.swing.JMenu mainMenuEditarCifrado;
    private javax.swing.JMenu mainMenuOperacionesCifrado;
    // End of variables declaration//GEN-END:variables

}
